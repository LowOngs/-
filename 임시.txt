<script>
(function(){
  const EXEC_BASE = 'https://script.google.com/macros/s/AKfycbxH-prUH-xtiVaSKxNNDx4QUCtCattAvvzcA_H0j5lZa9dcrfdWartd3AxxTu5B9AqjiQ/exec';

  const withQS = (base, params) => {
    const u = new URL(base);
    Object.entries(params).forEach(([k,v]) => u.searchParams.set(k, v));
    return u.toString();
  };

  // ✅ 회색 강제/해제 헬퍼
  function forceGray(el){
    el.style.filter = 'grayscale(1) brightness(.85) opacity(.55)';
    const img = el.querySelector('img');
    if (img) img.style.filter = 'grayscale(1) brightness(.9) opacity(.75)';
  }
  function clearGray(el){
    el.style.filter = '';
    const img = el.querySelector('img');
    if (img) img.style.filter = '';
  }

  // ✅ 상태 반영(인라인 필터까지 병행)
  function paintState(el, st){
    // st: {on:boolean, clickable:boolean, href:string}
    if (!st || !st.on){
      el.classList.remove('state-on','state-on-noclick');
      el.classList.add('state-off');
      el.removeAttribute('href'); el.removeAttribute('target'); el.removeAttribute('rel');
      el.style.pointerEvents = 'none';
      forceGray(el);                     // ← 인라인 강제
      return;
    }
    if (st.on && !st.clickable){
      el.classList.remove('state-off','state-on');
      el.classList.add('state-on-noclick');
      el.removeAttribute('href'); el.removeAttribute('target'); el.removeAttribute('rel');
      el.style.pointerEvents = 'none';
      forceGray(el);                     // ← 인라인 강제
      return;
    }
    // ON + 클릭 가능
    el.classList.remove('state-off','state-on-noclick');
    el.classList.add('state-on');
    el.href   = withQS(EXEC_BASE, {cmd:'go', pid: el.getAttribute('data-pid'), src:'footer'});
    el.target = '_blank';
    el.rel    = 'nofollow noopener';
    el.style.pointerEvents = '';
    clearGray(el);                       // ← 인라인 해제
  }

  function normalizeState(raw){
    if (raw && typeof raw === 'object') {
      return { on: !!raw.on, clickable: !!raw.clickable, href: typeof raw.href === 'string' ? raw.href : '' };
    }
    if (raw === true)  return { on:true,  clickable:false, href:'' };
    if (raw === false) return { on:false, clickable:false, href:'' };
    return { on:false, clickable:false, href:'' };
  }

  function init(){
    const els = document.querySelectorAll('.partner-btn[data-pid]');
    if (!els.length) return;

    document.addEventListener('click', function(e){
      const a = e.target.closest('.partner-btn');
      if (!a) return;
      if (a.classList.contains('state-off') || a.classList.contains('state-on-noclick')){
        e.preventDefault(); e.stopPropagation();
      }
    }, true);

    const mapUrl = withQS(EXEC_BASE, {cmd:'map', cb: Date.now()});
    fetch(mapUrl, {cache:'no-store'})
      .then(r => { if(!r.ok) throw new Error('map http '+r.status); return r.json(); })
      .then(map => {
        els.forEach(el=>{
          const pid = el.getAttribute('data-pid');
          const st  = normalizeState(map ? map[pid] : undefined);
          paintState(el, st);
        });
      })
      .catch(err=>{
        console.warn('[partners] map fetch failed:', err);
      });
  }

  window.addEventListener('load', init, {once:true});
})();
</script>
