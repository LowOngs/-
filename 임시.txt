/* ===== Ongs Partner Console – Code.gs (v11 full) ===== */

/* 기본 설정 */
var PARTNERS = [
  'amazon','ebay','target','mercadolibre','flipkart',
  'amazon_in','shopee','lazada','aliexpress','otto','zalando','allegro'
];
var TZ = 'Asia/Seoul';

/* (선택) 집계용 스프레드시트 – 설정 안 하면 집계는 자동으로 비활성(오류 없이 패스) */
var SPREADSHEET_ID = '';     // ▶ 필요 시 여기에 스프레드시트 ID 입력
var SHEET_NAME = 'stats';

/* 관리자 보안 */
function isAdmin_(){
  var me = Session.getActiveUser().getEmail();
  return !!me;  // 웹앱: 실행 사용자=본인, 액세스=모든 사용자(Anyone), UI 보호는 이 함수가 담당
}

/* 라우터 */
function doGet(e){
  var cmd = (e && e.parameter && e.parameter.cmd) || '';

  if (cmd === 'map') return jsonActiveMap_();     // 가젯에서 상태 맵(JSON) 조회
  if (cmd === 'go')  return handleRedirect_(e);   // 클릭 리디렉션(집계 포함)

  // 관리자 UI
  if (!isAdmin_()) return HtmlService.createHtmlOutput('<h3>Forbidden</h3>');
  return HtmlService.createHtmlOutputFromFile('admin_v11')
    .setTitle('Ongs · Partner Console – v11')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

/* 파트너 상태 읽기: { pid: {url:'', on:true/false}, ... } */
function getPartnerState(){
  var props = PropertiesService.getScriptProperties();
  var out = {};
  PARTNERS.forEach(function(pid){
    var url = props.getProperty('url_' + pid) || '';
    var on  = props.getProperty('on_'  + pid) === '1';
    out[pid] = { url: url, on: on };
  });
  return out;
}

/* URL 저장 (검증 포함) */
function setPartnerUrl(pid, url){
  if (!isAdmin_()) throw new Error('forbidden');
  if (PARTNERS.indexOf(pid) < 0) throw new Error('unknown pid');

  var u = (url || '').trim();
  if (u && !/^https?:\/\/\S+$/i.test(u)) throw new Error('invalid url');

  PropertiesService.getScriptProperties().setProperty('url_' + pid, u);
  return { ok: true, pid: pid, url: u };
}

/* ON/OFF 저장 + 최신 전체 상태 동봉 반환(클라이언트 즉시 반영용) */
function setPartnerOn(pid, on){
  if (!isAdmin_()) throw new Error('forbidden');
  if (PARTNERS.indexOf(pid) < 0) throw new Error('unknown pid');

  PropertiesService.getScriptProperties().setProperty('on_' + pid, on ? '1' : '0');
  return { ok: true, pid: pid, on: !!on, state: getPartnerState() };
}

/* 가젯용 활성 맵(JSON) – { pid: {on, clickable, href}, ... } */
function jsonActiveMap_(){
  var state = getPartnerState();
  var map = {};
  Object.keys(state).forEach(function(pid){
    var st = state[pid] || {};
    var on = !!st.on;
    var url = (st.url || '').trim();
    map[pid] = {
      on: on,
      clickable: (on && !!url),
      href: url
    };
  });
  return ContentService
    .createTextOutput(JSON.stringify(map))
    .setMimeType(ContentService.MimeType.JSON);
}

/* 리디렉션 (집계는 ON & URL 있을 때만 증가) */
function handleRedirect_(e){
  var raw = (e && e.parameter && (e.parameter.pid || e.parameter.partner)) || '';
  var pid = pidFrom_(raw);

  var props = PropertiesService.getScriptProperties();
  var url = pid ? (props.getProperty('url_' + pid) || '') : '';
  var on  = pid ? (props.getProperty('on_'  + pid) === '1') : false;

  if (!pid){
    return HtmlService.createHtmlOutput('<meta name="referrer" content="no-referrer"><h3>Unknown partner.</h3>');
  }
  if (!on){
    return HtmlService.createHtmlOutput('<meta name="referrer" content="no-referrer"><h3>Inactive partner button (OFF).</h3>');
  }
  if (!url){
    return HtmlService.createHtmlOutput('<meta name="referrer" content="no-referrer"><h3>Partner is ON but link not configured yet.</h3>');
  }

  bumpClick_(pid); // 집계 시도(시트 미설정이면 자동 패스)

  var html = '<meta name="referrer" content="no-referrer">' +
             '<script>location.replace(' + JSON.stringify(url) + ');</script>' +
             '<noscript><a href=' + JSON.stringify(url) + '>Continue</a></noscript>';
  return HtmlService.createHtmlOutput(html);
}

/* 헬퍼: pid 정규화 */
function pidFrom_(v){
  return String(v || '').trim().toLowerCase();
}

/* ===== 집계(스프레드시트 연결은 선택 사항) ===== */

function getMonthlyStatsRPC(){
  var mk = monthKey_();
  var counts = {};
  PARTNERS.forEach(function(pid){ counts[pid] = 0; });

  var sh = getSheet_();
  if (!sh){
    // 시트 미설정이면 0으로 응답
    return { yyyymm: mk, counts: counts };
  }
  var data = sh.getDataRange().getValues(); // [month,pid,count]
  for (var i=1; i<data.length; i++){
    var m = data[i][0], p = data[i][1], c = Number(data[i][2] || 0);
    if (m === mk && counts.hasOwnProperty(p)) counts[p] += c;
  }
  return { yyyymm: mk, counts: counts };
}

function bumpClick_(pid){
  var sh = getSheet_();
  if (!sh) return; // 시트 미설정이면 집계 생략

  var mk = monthKey_();
  // 단순 append (월/파트너/1)
  sh.appendRow([mk, pid, 1]);
}

function getSheet_(){
  try{
    if (!SPREADSHEET_ID) return null;
    var ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    var sh = ss.getSheetByName(SHEET_NAME);
    if (!sh){
      sh = ss.insertSheet(SHEET_NAME);
      sh.getRange(1,1,1,3).setValues([['month','pid','count']]);
    }
    return sh;
  }catch(err){
    // 권한/ID 문제 시 조용히 비활성화
    return null;
  }
}

function monthKey_(){
  var tz = Session.getScriptTimeZone() || TZ;
  return Utilities.formatDate(new Date(), tz, 'yyyy-MM');
}
