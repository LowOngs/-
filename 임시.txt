/** ——— CONFIG ——— */
const BLOG_ID = 'YOUR_BLOG_ID';      // ← 블로그 ID로 교체
const API_KEY = 'YOUR_API_KEY';      // ← Blogger API Key로 교체

/** 캐시(분) */
const CACHE_MIN = 10;

const JSON_TYPE = ContentService.MimeType.JSON;

function doGet(e) {
  try {
    const blogId = (e && e.parameter && e.parameter.blogId) || BLOG_ID;
    const key    = (e && e.parameter && e.parameter.key)    || API_KEY;

    const cache = CacheService.getScriptCache();
    const ck = `pv:${blogId}`;
    const cached = cache.get(ck);
    if (cached) return _json(cached);

    const base = `https://www.googleapis.com/blogger/v3/blogs/${encodeURIComponent(blogId)}/pageviews`;
    const q30  = `${base}?range=30D&key=${encodeURIComponent(key)}`;
    const qall = `${base}?range=ALL_TIME&key=${encodeURIComponent(key)}`;

    const last30 = _sumValues(_safeFetchJSON(q30));
    const all    = _sumValues(_safeFetchJSON(qall));

    const payload = JSON.stringify({
      monthly: last30 || 0,
      total:   all    || 0
    });

    cache.put(ck, payload, CACHE_MIN * 60); // 초 단위
    return _json(payload);

  } catch (err) {
    return _json(JSON.stringify({ monthly: 0, total: 0, error: String(err) }));
  }
}

function _safeFetchJSON(url) {
  try {
    const res = UrlFetchApp.fetch(url, {
      method: 'get',
      muteHttpExceptions: true,
      headers: { 'Accept': 'application/json' }
    });
    if (res.getResponseCode() >= 200 && res.getResponseCode() < 300) {
      return JSON.parse(res.getContentText());
    }
  } catch (_) {}
  return null;
}

function _sumValues(obj) {
  // 응답 예: { "counts": [ { "timeRange":"30D","count":123 }, ... ] }
  if (!obj || !obj.counts) return 0;
  return obj.counts.reduce((acc, it) => acc + (Number(it.count) || 0), 0);
}

function _json(str) {
  return ContentService.createTextOutput(str).setMimeType(JSON_TYPE);
}
